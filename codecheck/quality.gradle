/**
 * Set up Checkstyle, Findbugs and PMD to perform extensive code analysis.
 *
 * Gradle tasks added:
 * - jacocoTestCoverageVerification
 * - checkstyle
 * - findbugs
 * - pmd
 *
 * The three tasks above are added as dependencies of the check task so running check will
 * run all of them.
 */

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

def qualityConfigDir = "$project.rootDir/codecheck" as String;
def reportsDir = "$project.buildDir/reports" as String

check.dependsOn 'checkstyle', 'jacocoTestCoverageVerification', 'findbugs', 'pmd'

task jacocoTestCoverageVerification(
  type: JacocoCoverageVerification,
  group: 'Verification',
  description: 'Jacoco test coverage verification',
  dependsOn: 'jacocoTestReport'
) {
  def jacocoFilter = ['**/BuildConfig.*', '**/*Test*.*', '**/*Exception*.*']

  sourceDirectories.setFrom(files(["$project.projectDir/src/main/java"]))
  classDirectories.setFrom(files([fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: jacocoFilter)]))
  executionData.setFrom(files("${buildDir}/jacoco/testDebugUnitTest.exec"))

  violationRules {
    failOnViolation = true
    rule {
      element = 'BUNDLE'

      limit {
        value = 'COVEREDRATIO'
        counter = 'INSTRUCTION'
        minimum = 0.8
      }
    }
  }
}

task checkstyle(
  type: Checkstyle,
  group: 'Verification',
  description: 'Runs code style checks'
) {
  configFile file("$qualityConfigDir/checkstyle/checkstyle.xml")
  configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/codecheck/checkstyle/suppressions.xml").absolutePath

  maxWarnings = 0
  ignoreFailures = true

  source 'src'
  include '**/*.java'
  exclude '**/gen/**'

  reports {
    xml.enabled = true
    xml.destination = "$reportsDir/checkstyle/checkstyle.xml"
  }

  classpath = files()
}

task findbugs(
  type: FindBugs,
  group: 'Verification',
  description: 'Inspect java bytecode for bugs',
  dependsOn: ['compileDebugSources', 'compileReleaseSources']
) {

  ignoreFailures = true
  effort = "max"
  reportLevel = "high"
  excludeFilter = new File("$qualityConfigDir/findbugs/findbugs-exclude-filter.xml")
  classes = files("$project.rootDir/app/build/intermediates/classes") as DefaultTask

  source 'src'
  include '**/*.java'
  exclude '**/gen/**'

  reports {
    xml.enabled = true
    html.enabled = false
    xml {
      destination "$reportsDir/findbugs/findbugs.xml"
    }
    html {
      destination "$reportsDir/findbugs/findbugs.html"
    }
  }

  classpath = files()
}

task pmd(
  type: Pmd,
  group: 'Verification',
  description: 'Inspect sourcecode for bugs'
) {
  ruleSetFiles = files("$qualityConfigDir/pmd/pmd-ruleset.xml")
  ignoreFailures = true
  ruleSets = []

  source 'src'
  include '**/*.java'
  exclude '**/gen/**'

  reports {
    xml.enabled = true
    html.enabled = true
    xml.destination = "$reportsDir/pmd/pmd.xml"
    html.destination = "$reportsDir/pmd/pmd.html"
  }
}
