import com.github.spotbugs.snom.SpotBugsTask

/**
 * Set up Checkstyle, Findbugs and PMD to perform extensive code analysis.
 *
 * Gradle tasks added:
 * - jacocoTestCoverageVerification
 * - checkstyle
 * - spotbugs
 * - pmd
 *
 * The three tasks above are added as dependencies of the check task so running check will
 * run all of them.
 */

apply plugin: "checkstyle"
apply plugin: "com.github.spotbugs"
//apply plugin: "findbugs"
apply plugin: "pmd"
apply plugin: "com.github.kt3k.coveralls"

def qualityConfigDir = "$project.rootDir/codecheck" as String
def reportsDir = "$project.buildDir/reports" as String

check.dependsOn "styleCheck", "jacocoTestCoverageCheck", "spotbugsCheck", "pmdCheck"

task jacocoTestCoverageCheck(
  type: JacocoCoverageVerification,
  group: "Verification",
  description: "Jacoco test coverage verification"
  //dependsOn: "jacocoTestReport"
) {
  def jacocoFilter = ["**/BuildConfig.*", "**/*Test*.*", "**/*Exception*.*"]

  sourceDirectories.setFrom(files(["$project.projectDir/src/main/java"]))
  classDirectories.setFrom(files([fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: jacocoFilter)]))
  executionData.setFrom(files("${buildDir}/jacoco/testDebugUnitTest.exec"))

  violationRules {
    failOnViolation = true
    rule {
      element = "BUNDLE"

      limit {
        value = "COVEREDRATIO"
        counter = "INSTRUCTION"
        minimum = 0.8
      }
    }
  }
}

task codeCoverageReport(type: JacocoReport, group: "Coverage reports") {
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

//  dependsOn javaProjects*.test

//  javaProjects.each {
//    sourceSets it.sourceSets.main
//  }

  reports {
    xml.enabled = true
    xml.destination new File("${buildDir}/reports/jacoco/report.xml")
    html.enabled = true
    html.destination new File("${buildDir}/reports/jacoco/html")
    csv.enabled = false
  }
  afterEvaluate {
    // Exclude generated files from top-level coverage report
    classDirectories.setFrom(
      files(
        classDirectories.files.collect {
          fileTree(
            dir: it,
            exclude: [
              "**/com/netflix/genie/proto/**",
              "**/com/netflix/genie/web/data/entities/*_*",
            ]
          )
        }
      )
    )
  }
}

task styleCheck(
  type: Checkstyle,
  group: "Verification",
  description: "Runs code style checks"
) {
  configFile file("$qualityConfigDir/checkstyle/checkstyle.xml")
  //configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/codecheck/checkstyle/suppressions.xml").absolutePath
  configProperties = [
    "checkstyle.cache.file"      : rootProject.file("build/checkstyle.cache"),
    "checkstyle.suppression.file": file("${project.rootDir}/codecheck/checkstyle/suppressions.xml")
  ]

  maxWarnings = 0
  ignoreFailures = true

  source "src"
  include "**/*.java"
  exclude "**/gen/**"

  reports {
    xml.enabled = true
    xml.setDestination(file("$reportsDir/checkstyle/checkstyle.xml"))
    html.stylesheet resources.text.fromFile("$reportsDir/checkstyle/checkstyle-custom.xsl")
  }

  classpath = files()
}

task spotbugsCheck(
  type: SpotBugsTask,
  group: "Verification",
  description: "Inspect java bytecode for bugs",
  dependsOn: ["classes"]
) {
  classDirs = sourceSets.main.output
  sourceDirs = sourceSets.main.allSource.sourceDirectories
  auxClassPaths = sourceSets.main.compileClasspath

  spotbugsMain.enabled = true
  spotbugsTest.enabled = true

  reports {
    xml.enabled = false
    html.enabled = true
  }
}

//task findbugs(
//  type: FindBugs,
//  group: "Verification",
//  description: "Inspect java bytecode for bugs",
//  dependsOn: ["compileDebugSources", "compileReleaseSources"]
//) {
//  ignoreFailures = true
//  effort = "max"
//  reportLevel = "high"
//  maxHeapSize = "512m"
//  excludeFilter = new File("$qualityConfigDir/findbugs/findbugs-exclude-filter.xml")
//  classes = files("$project.rootDir/app/build/intermediates/classes") as DefaultTask
//
//  source "src"
//  include "**/*.java"
//  exclude "**/gen/**"
//
//  reports {
//    xml.enabled = true
//    html.enabled = false
//    html.stylesheet resources.text.fromFile("$qualityConfigDir/findbugs/findbugs-custom.xsl")
//    xml {
//      destination "$reportsDir/findbugs/findbugs.xml"
//    }
//    html {
//      destination "$reportsDir/findbugs/findbugs.html"
//    }
//  }
//
//  classpath = files()
//}

task pmdCheck(
  type: Pmd,
  group: "Verification",
  description: "Inspect sourcecode for bugs"
) {
  ruleSetFiles = files("$qualityConfigDir/pmd/pmd-ruleset.xml")
  ignoreFailures = true
  ruleSets = []

  source "src"
  include "**/*.java"
  exclude "**/gen/**"

  reports {
    xml.enabled = true
    html.enabled = true
    xml.setDestination(file("$reportsDir/pmd/pmd.xml"))
    html.setDestination(file("$reportsDir/pmd/pmd.html"))
  }
}

//findbugsTest {
//  enabled = false
//}

def javaProjects = subprojects.findAll {
  it.name != "genie-demo" && it.name != "genie-ddl" && it.name != "genie-docs"
}

coveralls {
  sourceDirs = javaProjects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${project.buildDir}/reports/jacoco/report.xml"
}

tasks.coveralls {
  group = "Coverage reports"
  description = "Uploads the aggregated coverage report to Coveralls"

  dependsOn codeCoverageReport
  onlyIf {
    System.env."CI"
  }
}
