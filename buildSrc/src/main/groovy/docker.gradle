ext.isDockerRunning = {
  def dummyOutputStream = new OutputStream() {
    @Override
    void write(int b) {}
  }

  def dockerRunning = exec {
    executable "docker"
    args "info"
    ignoreExitValue true
    standardOutput dummyOutputStream
    errorOutput dummyOutputStream
  }

  if (dockerRunning.exitValue != 0) {
    println("Docker not running.")
  }

  return dockerRunning.exitValue == 0
}

ext.getDockerTags = { String appName, String projectVersion ->
  def tags = ["netflixoss/${appName}:${projectVersion}"]

  if (!projectVersion.contains("SNAPSHOT") && !projectVersion.contains("-rc.")) {
    tags.add("netflixoss/${appName}:latest")
    tags.add("netflixoss/${appName}:latest.release")
  } else if (projectVersion.contains("-rc.")) {
    tags.add("netflixoss/${appName}:latest.candidate")
  } else {
    tags.add("netflixoss/${appName}:latest.snapshot")
  }

  return tags
}

task dockerLogout(type: Exec, group: "Docker", description: "Logout of docker hub") {
  onlyIf {
    rootProject.ext.isDockerRunning()
  }
  commandLine "docker", "logout"
}

task dockerLogin(type: Exec, group: "Docker", description: "Login to docker hub using DOCKER_USER and DOCKER_PASSWORD environment variables") {
  onlyIf {
    rootProject.ext.isDockerRunning()
  }
  dependsOn tasks.dockerLogout
  commandLine "docker", "login", "-u", System.getenv("DOCKER_USER") ?: "", "-p", System.getenv("DOCKER_PASSWORD") ?: ""
}

task dockerBuildAllImages(group: "Docker", description: "Container task for all docker image builds") {
  onlyIf {
    rootProject.ext.isDockerRunning()
  }
}
