import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

//compileJava {
//  doFirst {
//    options.compilerArgs = [
//      '--module-path', classpath.asPath,
//    ]
//    classpath = files()
//  }
//}

//compileKotlin {
//  kotlinOptions {
//    freeCompilerArgs += ["-Xskip-runtime-version-check"]
//    jvmTarget = "1.8"
//  }
//  sourceCompatibility = JavaVersion.VERSION_1_8
//  targetCompatibility = JavaVersion.VERSION_1_8
//}

//compileTestKotlin {
//  kotlinOptions {
//    jvmTarget = "1.8"
//  }
//  sourceCompatibility = JavaVersion.VERSION_1_8
//  targetCompatibility = JavaVersion.VERSION_1_8
//}

//ktlint {
//  version = KTLINT_VERSION
//}

configurations.all { config ->
  config.resolutionStrategy {
    cacheChangingModulesFor 0, 'seconds'
    dependencySubstitution {
      if (config.name.toLowerCase().contains('test')) {
        substitute module('org.slf4j:slf4j-simple:1.6.1') with module('org.slf4j:slf4j-nop:1.6.1')
      }
    }
  }
}

tasks.withType(Test) {
  maxParallelForks = Runtime.runtime.availableProcessors()
}

tasks.withType(JavaCompile) {
  configure(options) {
    options.encoding = 'UTF-8'
    options.deprecation = true
    options.compilerArgs += ['--release', '8']
    options.compilerArgs += '-Xlint:deprecation'
    options.compilerArgs += '-Xlint:unchecked'
  }
}

clean.doFirst {
  delete "${projectDir}/docs/apidocs"
}

sourceSets {
  main.java.srcDirs += "src/main/java"
  test.java.srcDirs += "src/test/java"
}

processResources {
  doFirst {
    from 'src/main/resources'
    filter(ReplaceTokens, tokens: [project_version: project.version, project_name: project.name])
  }
}

java {
  modularity.inferModulePath.set(true)
}

test {
  useJUnitPlatform()

  testLogging {
    showExceptions = true
    showStandardStreams = true
    exceptionFormat = TestExceptionFormat.FULL
    events "skipped", "failed", "standardOut", "standardError"
  }

  testlogger {
    theme 'standard-parallel'
    showExceptions true
    showStackTraces true
    showCauses true
    showFullStackTraces true
    showSummary true
    showSimpleNames true
    showStandardStreams true
    showPassedStandardStreams false
    showSkippedStandardStreams false
    showFailedStandardStreams true
  }
}

ext.projectConfig = [
  "group"      : 'io.nullables.api.sample',
  "version"    : '1.0.0-SNAPSHOT',
  "description": "Gradle java sample project"
]
ext.buildConfig = [
  "sourceCompatibility": JavaVersion.VERSION_1_8,
  "targetCompatibility": JavaVersion.VERSION_1_8,
  "projectBuildDir"    : "${rootProject.buildDir}/${project.name}"
]
ext.versions = [
  "guava"           : "30.1-jre",
  "commons_lang"    : "3.11",
  "lombok"          : "1.18.16",
  "assertj"         : "3.18.1",
  "hamcrest"        : "2.2",
  "junit5"          : "5.7.0",
  "junit5_platform" : "1.7.0",
  "javax"           : "1.3.2",
  "thrift"          : "0.13.0",
  "spock"           : "1.2-groovy-2.5",
  "protobuf_gradle" : "0.8.14",
  "protoc_gen"      : "0.4.1",
  "netty"           : "5.0.0.Alpha2",
  "protobuf"        : "4.0.0-rc-2",
  "flatbuffers"     : "1.12.0",
  "avro"            : "1.10.1",
  "logback"         : "1.3.0-alpha5",
  "logback_json"    : "0.1.5",
  "jackson_databind": "2.12.1",
  "janino"          : "3.1.2"
]
ext.libraries = [
  core: [
    "guava"               : "com.google.guava:guava:${versions.guava}",
    "commons_lang"        : "org.apache.commons:commons-lang3:${versions.commons_lang}",
    "lombok"              : "org.projectlombok:lombok:${versions.lombok}",
    "javax"               : "javax.annotation:javax.annotation-api:${versions.javax}",
    "thrift"              : "org.apache.thrift:libthrift:${versions.thrift}",
    "protobuf_gradle"     : "com.google.protobuf:protobuf-gradle-plugin:${versions.protobuf_gradle}",
    "pgv_java"            : "io.envoyproxy.protoc-gen-validate:pgv-java:${versions.protoc_gen}",
    "pgv_java_stub"       : "io.envoyproxy.protoc-gen-validate:pgv-java-stub:${versions.protoc_gen}",
    "netty"               : "io.netty:netty-all:${versions.netty}",
    "protobuf"            : "com.google.protobuf:protobuf-java:${versions.protobuf}",
    "flatbuffers"         : "com.google.flatbuffers:flatbuffers-java:${versions.flatbuffers}",
    "avro"                : "org.apache.avro:avro:${versions.avro}",
    "logback"             : "ch.qos.logback:logback-core:${versions.logback}",
    "logback_classic"     : "ch.qos.logback:logback-classic:${versions.logback}",
    "logback_json_classic": "ch.qos.logback.contrib:logback-json-classic:${versions.logback_json}",
    "logback_jackson"     : "ch.qos.logback.contrib:logback-jackson:${versions.logback_json}",
    "jackson_databind"    : "com.fasterxml.jackson.core:jackson-databind:${versions.jackson_databind}",
    "janino"              : "org.codehaus.janino:janino:${versions.janino}"
  ],
  test: [
    "assertj"        : "org.assertj:assertj-core:${versions.assertj}",
    "hamcrest"       : "org.hamcrest:hamcrest:${versions.hamcrest}",
    "spock_core"     : "org.spockframework:spock-core:${versions.spock}",
    "spock_spring"   : "org.spockframework:spock-spring:${versions.spock}",
    "junit5_api"     : "org.junit.jupiter:junit-jupiter-api:${versions.junit5}",
    "junit5_engine"  : "org.junit.jupiter:junit-jupiter-engine:${versions.junit5}",
    "junit5_params"  : "org.junit.jupiter:junit-jupiter-params:${versions.junit5}",
    "junit5_runner"  : "org.junit.platform:junit-platform-runner:${versions.junit5_platform}",
    "junit5_launcher": "org.junit.platform:junit-platform-launcher:${versions.junit5_platform}"
  ]
]
ext {
  excludeJunit = { exclude group: 'junit', module: 'junit' }
  excludeChecker = { exclude group: 'edu.washington.cs.types.checker', module: 'checker-framework' }
}
