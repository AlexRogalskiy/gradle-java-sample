import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

//compileKotlin {
//  kotlinOptions {
//    freeCompilerArgs += ["-Xskip-runtime-version-check"]
//    jvmTarget = "1.8"
//  }
//  sourceCompatibility = JavaVersion.VERSION_1_8
//  targetCompatibility = JavaVersion.VERSION_1_8
//}

//compileTestKotlin {
//  kotlinOptions {
//    jvmTarget = "1.8"
//  }
//  sourceCompatibility = JavaVersion.VERSION_1_8
//  targetCompatibility = JavaVersion.VERSION_1_8
//}

//ktlint {
//  version = KTLINT_VERSION
//  filter {
//    exclude { projectDir.toURI().relativize(it.file.toURI()).path.contains("/generated/") }
//  }
//}

def jvmVersion = System.getProperty('java.version').split('\\.')[0] as Integer
def useModules = jvmVersion >= 9 && !project.hasProperty('no-modules')

compileJava {
  if (useModules) {
    doFirst {
      options.fork = true
      //options.forkOptions.executable = "${System.getenv("JAVA_HOME")}/bin/javac"
      options.compilerArgs += [
        // '--module-path',
        classpath.asPath,
      ]
      classpath = files()
    }
  }
  options.compilerArgs += ['-Xlint:-deprecation']
  options.encoding = 'UTF-8'
}

jacoco {
  toolVersion = "0.8.2"
}

configurations.all { config ->
  config.resolutionStrategy {
    cacheChangingModulesFor 0, 'seconds'
    dependencySubstitution {
      if (config.name.toLowerCase().contains('test')) {
        substitute module('org.slf4j:slf4j-simple:1.6.1') with module('org.slf4j:slf4j-nop:1.6.1')
      }
    }
  }
}

tasks.withType(Test) {
  task ->
    // Use JUnit 5 with Jupiter
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    jvmArgs += ["-XX:MaxPermSize=512m"]

    minHeapSize = "256m"
    maxHeapSize = "2g"

    maxParallelForks = Runtime.runtime.availableProcessors()

    systemProperty 'spring.test.constructor.autowire.mode', 'all'

    // Environment properties to be forwarded to the test runtime
    [
      "CI",
      "INTEGRATION_TEST_DB",
    ].each { envVariableName ->
      if (System.getenv(envVariableName) != null) {
        systemProperty envVariableName, System.getenv(envVariableName)
      }
    }

    reports.html.setDestination(new File("${reporting.baseDir}/test/${task.name}"))
    jacocoTestReport.getExecutionData().plus(files("$buildDir/jacoco/${task.name}.exec"))

    forkEvery = 1

    // Customize test logging on CI and everywhere else
    testLogging {
      displayGranularity = 2
      showExceptions = true
      showStandardStreams = true
      exceptionFormat = TestExceptionFormat.FULL
      events "skipped", "passed", "failed", "standardOut", "standardError"

      if (System.getenv("CI") != null) {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
      } else {
        events "failed"
      }
    }

    testlogger {
      theme 'standard-parallel'
      showExceptions true
      showStackTraces true
      showCauses true
      showFullStackTraces true
      showSummary true
      showSimpleNames true
      showStandardStreams true
      showPassedStandardStreams false
      showSkippedStandardStreams false
      showFailedStandardStreams true
    }

    afterSuite { desc, result ->
      if (!desc.parent) {
        println "\nTest result: ${result.resultType}"
        println "Test summary: ${result.testCount} tests, " +
          "${result.successfulTestCount} succeeded, " +
          "${result.failedTestCount} failed, " +
          "${result.skippedTestCount} skipped"
      }
    }

    finalizedBy jacocoTestReport
}

tasks.withType(JavaCompile) {
  configure(options) {
    if (!useModules) {
      exclude '*module-info*'
    }
    options.encoding = 'UTF-8'
    options.deprecation = true
    options.warnings = true
    //options.compilerArgs += ['--release', '8']
    options.compilerArgs += '-Xlint:deprecation'
    options.compilerArgs += '-Xlint:unchecked'
    //options.compilerArgs += project.generatedSourcesJavaDir
  }
}

clean.doFirst {
  delete "${projectDir}/docs/apidocs"
}

sourceSets {
  main.java.srcDirs += "src/main/java"
  //main.java.srcDirs += project.generatedSourcesJavaDir
  test.java.srcDirs += "src/test/java"

  functionalTest {
    java {
      srcDir file('src/functionalTest/java')
    }
    resources {
      srcDir file('src/functionalTest/resources')
    }
    compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
    runtimeClasspath += output + compileClasspath
  }
}

task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
  sourceSets*.allSource*.srcDirs*.each { File srcDir ->
    if (!srcDir.isDirectory()) {
      println "Creating source folder: ${srcDir}"
      srcDir.mkdirs()
    }
  }
}

task functionalTest(type: Test) {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}
check.dependsOn functionalTest

//gradlePlugin {
//  testSourceSets sourceSets.functionalTest
//}

processResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE

  doFirst {
    final File file = new File("$buildDir/resources/main/build-date.txt")
    if (file.createNewFile()) {
      file.text = ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT)
    }
  }

  with copySpec {
    from 'src/main/resources'
    include '**/application*.yml'
    include '**/application*.yaml'
    include '**/application*.properties'

    project.properties.findAll().each {
      prop ->
        if (prop.value != null) {
          filter(ReplaceTokens, tokens: [(prop.key): String.valueOf(prop.value)])
          filter(ReplaceTokens, tokens: [('project.' + prop.key): String.valueOf(prop.value)])
          filter(ReplaceTokens, tokens: [project_version: project.version, project_name: project.name])
        }
    }
  }
}

java {
  modularity.inferModulePath.set(true)
}
