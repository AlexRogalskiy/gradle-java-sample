import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
  id("org.jetbrains.dokka") apply false
  id("com.github.johnrengelman.shadow") apply false
  id("com.github.ben-manes.versions")

  id("org.sonarqube")

  id("java")
  id("maven")
}

repositories {
  mavenCentral()
  mavenLocal()
  google()
  jcenter()

  maven {
    name "JCenter Gradle Plugins repository"
    url "https://dl.bintray.com/gradle/gradle-plugins"
  }
  maven {
    name "Sonatype Snapshots repository"
    url "https://oss.sonatype.org/content/repositories/snapshots/"
  }
  maven {
    name "Gradle repository"
    url "https://plugins.gradle.org/m2/"
  }
}

allprojects {
  apply plugin: 'com.github.johnrengelman.shadow'
  apply plugin: 'java'
  apply plugin: 'idea'
}

subprojects {
  group 'io.nullables.api.sample'
  version '1.0.0-SNAPSHOT'
  description = "Gradle java sample project"

  project.buildDir = "${rootProject.buildDir}/${project.name}"

  apply plugin: 'java'
  apply plugin: 'groovy'

  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  repositories {
    mavenCentral()
    jcenter()
    google()
  }

  ext {
    guava_version = '30.1-jre'
    lombok_version = '1.18.16'
    commons_lang_version = '3.11'
    assertj_version = '3.18.1'
    hamcrest_version = '2.2'
    junit_version = '5.7.0'
    junit_platform_version = '1.7.0'
  }

  dependencies {
    // guava library dependencies
    implementation("com.google.guava:guava:$guava_version")

    // commons lang library dependencies
    implementation("org.apache.commons:commons-lang3:$commons_lang_version")

    // lombok library dependencies
    implementation("org.projectlombok:lombok:${lombok_version}")
    annotationProcessor("org.projectlombok:lombok:${lombok_version}")

    // lombok test library dependencies
    testImplementation("org.projectlombok:lombok:${lombok_version}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombok_version}")

    // assertj library dependencies
    testImplementation("org.assertj:assertj-core:${assertj_version}")

    // hamcrest library dependencies
    testImplementation("org.hamcrest:hamcrest:${hamcrest_version}")

    // junit test library dependencies
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_version")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:$junit_version")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")
    testImplementation("org.junit.platform:junit-platform-runner:$junit_platform_version")
    testImplementation("org.junit.platform:junit-platform-launcher:$junit_platform_version") {
      exclude group: 'junit', module: 'junit'
    }
  }

  test {
    useJUnitPlatform()

    testLogging {
      showExceptions = true
      showStandardStreams = true
      exceptionFormat = TestExceptionFormat.FULL
    }
  }

  processResources {
    doFirst {
      from 'src/main/resources'
      filter(ReplaceTokens, tokens: [project_version: project.version, project_name: project.name])
    }
  }

//  compileJava {
//    doFirst {
//      options.compilerArgs = [
//        '--module-path', classpath.asPath,
//      ]
//      classpath = files()
//    }
//  }

  tasks.withType(JavaCompile) {
    configure(options) {
      options.encoding = 'UTF-8'
      options.deprecation = true
      options.compilerArgs += ['--release', '8']
      options.compilerArgs += '-Xlint:deprecation'
      options.compilerArgs += '-Xlint:unchecked'
    }
  }

  java {
    modularity.inferModulePath.set(true)
  }
}

jar {
  manifest {
    attributes("Class-Path": configurations.compile.collect { it.getPath() }.join(' '))
  }
}

task stage(dependsOn: ['clean'])

task copyToLib(type: Copy) {
  from "$buildDir/libs"
  into "$rootProject.buildDir/libs"
}
copyToLib.dependsOn(stage)
stage.dependsOn(copyToLib)

task copyLicense {
  outputs.file new File("$buildDir/LICENSE")
  doLast {
    copy {
      from "LICENSE"
      into "$buildDir"
    }
  }
}
