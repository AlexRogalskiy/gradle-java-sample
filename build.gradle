plugins {
  id("com.github.ben-manes.versions")
  id("com.github.johnrengelman.shadow") apply false
  id("com.adarshr.test-logger") version "2.1.1"
  id("com.diffplug.spotless") version "5.9.0"

  id("org.sonarqube")
  id("java")
  id("maven")
}

repositories {
  mavenCentral()
  mavenLocal()
  google()
  jcenter()

  maven {
    name "JCenter Gradle Plugins repository"
    url "https://dl.bintray.com/gradle/gradle-plugins"
  }
  maven {
    name "Sonatype Snapshots repository"
    url "https://oss.sonatype.org/content/repositories/snapshots/"
  }
  maven {
    name "Gradle repository"
    url "https://plugins.gradle.org/m2/"
  }
}

allprojects {
  apply plugin: 'com.github.johnrengelman.shadow'
  apply plugin: 'com.adarshr.test-logger'
  apply plugin: 'com.diffplug.spotless'
  apply plugin: 'java'

  testlogger {
    theme 'mocha'
    slowThreshold 5000
  }

  spotless {
//    java {
//      googleJavaFormat()
//    }
  }

  repositories {
    jcenter()
    mavenCentral()

    maven {
      name "KotlinX repository"
      url "https://kotlin.bintray.com/kotlinx"
    }
    maven {
      name "Artifactory repository"
      url "https://oss.jfrog.org/artifactory/oss-snapshot-local/"
    }
  }
}

subprojects {
  apply from: "${rootDir}/buildSrc/src/main/groovy/subproject.gradle"
  apply from: "${rootDir}/buildSrc/src/main/groovy/setup.gradle"

  apply plugin: 'java'
  apply plugin: 'groovy'

  group projectConfig.group
  version projectConfig.version
  description = projectConfig.description

  sourceCompatibility = buildConfig.sourceCompatibility
  targetCompatibility = buildConfig.targetCompatibility

  archivesBaseName = project.buildFile
  project.buildDir = buildConfig.projectBuildDir

  repositories {
    mavenCentral()
    jcenter()
    google()
  }

  dependencies {
    // guava library dependencies
    implementation deps.guava

    // commons lang library dependencies
    implementation deps.commons_lang

    // lombok library dependencies
    implementation deps.lombok
    annotationProcessor deps.lombok

    // lombok test library dependencies
    testImplementation deps.lombok
    testAnnotationProcessor deps.lombok

    // assertj library dependencies
    testImplementation deps.assertj

    // hamcrest library dependencies
    testImplementation deps.hamcrest

    // junit test library dependencies
    testImplementation deps.junit5_api
    testImplementation deps.junit5_engine
    testImplementation deps.junit5_params
    testImplementation deps.junit5_runner
    testImplementation(deps.junit5_launcher) {
      excludeJunit
    }
  }

  dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
      rules.all { ComponentSelection selection ->
        boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview", "b", "ea", "snapshot"].any {
          qualifier ->
            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
        }
        if (rejected) {
          selection.reject("Release candidate")
        }
      }
    }
  }
}

jar {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

  manifest {
    attributes("Class-Path": configurations.compile.collect { it.getPath() }.join(' '))
  }
}

task stage(dependsOn: ['clean'])

task copyToLib(type: Copy) {
  from "$buildDir/libs"
  into "$rootProject.buildDir/libs"
}
copyToLib.dependsOn(stage)
stage.dependsOn(copyToLib)

task copyLicense {
  outputs.file new File("$buildDir/LICENSE")
  doLast {
    copy {
      from "LICENSE"
      into "$buildDir"
    }
  }
}
