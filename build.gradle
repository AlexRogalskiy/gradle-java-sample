import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
  id("com.github.johnrengelman.shadow") apply false
  id("com.github.ben-manes.versions")

  id("org.sonarqube")

  id("java")
  id("maven")
}

repositories {
  mavenCentral()
  mavenLocal()
  google()
  jcenter()

  maven {
    name "JCenter Gradle Plugins repository"
    url "https://dl.bintray.com/gradle/gradle-plugins"
  }
  maven {
    name "Sonatype Snapshots repository"
    url "https://oss.sonatype.org/content/repositories/snapshots/"
  }
  maven {
    name "Gradle repository"
    url "https://plugins.gradle.org/m2/"
  }
}

allprojects {
  apply plugin: 'com.github.johnrengelman.shadow'
  apply plugin: 'java'
  apply plugin: 'idea'
}

subprojects {

  ext.projectConfig = [
    "group"      : 'io.nullables.api.sample',
    "version"    : '1.0.0-SNAPSHOT',
    "description": "Gradle java sample project"
  ]
  ext.buildConfig = [
    "sourceCompatibility": JavaVersion.VERSION_1_8,
    "targetCompatibility": JavaVersion.VERSION_1_8,
    "projectBuildDir"    : "${rootProject.buildDir}/${project.name}"
  ]
  ext.versions = [
    "guava"          : "30.1-jre",
    "commons_lang"   : "3.11",
    "lombok"         : "1.18.16",
    "assertj"        : "3.18.1",
    "hamcrest"       : "2.2",
    "junit5"         : "5.7.0",
    "junit5_platform": "1.7.0",
  ]
  ext.deps = [
    "guava"          : "com.google.guava:guava:${versions.guava}",
    "commons_lang"   : "org.apache.commons:commons-lang3:${versions.commons_lang}",
    "lombok"         : "org.projectlombok:lombok:${versions.lombok}",
    "assertj"        : "org.assertj:assertj-core:${versions.assertj}",
    "hamcrest"       : "org.hamcrest:hamcrest:${versions.hamcrest}",
    "junit5_api"     : "org.junit.jupiter:junit-jupiter-api:${versions.junit5}",
    "junit5_engine"  : "org.junit.jupiter:junit-jupiter-engine:${versions.junit5}",
    "junit5_params"  : "org.junit.jupiter:junit-jupiter-params:${versions.junit5}",
    "junit5_runner"  : "org.junit.platform:junit-platform-runner:${versions.junit5_platform}",
    "junit5_launcher": "org.junit.platform:junit-platform-launcher:${versions.junit5_platform}",
  ]

  group projectConfig.group
  version projectConfig.version
  description = projectConfig.description

  apply plugin: 'java'
  apply plugin: 'groovy'

  sourceCompatibility = buildConfig.sourceCompatibility
  targetCompatibility = buildConfig.targetCompatibility

  project.buildDir = buildConfig.projectBuildDir

  repositories {
    mavenCentral()
    jcenter()
    google()
  }

  java {
    modularity.inferModulePath.set(true)
  }

  dependencies {
    // guava library dependencies
    implementation deps.guava

    // commons lang library dependencies
    implementation deps.commons_lang

    // lombok library dependencies
    implementation deps.lombok
    annotationProcessor deps.lombok

    // lombok test library dependencies
    testImplementation deps.lombok
    testAnnotationProcessor deps.lombok

    // assertj library dependencies
    testImplementation deps.assertj

    // hamcrest library dependencies
    testImplementation deps.hamcrest

    // junit test library dependencies
    testImplementation deps.junit5_api
    testImplementation deps.junit5_engine
    testImplementation deps.junit5_params
    testImplementation deps.junit5_runner
    testImplementation(deps.junit5_launcher) {
      exclude group: 'junit', module: 'junit'
    }
  }

  test {
    useJUnitPlatform()

    testLogging {
      showExceptions = true
      showStandardStreams = true
      exceptionFormat = TestExceptionFormat.FULL
    }
  }

  sourceSets {
    main.java.srcDirs += "src/main/java"
    test.java.srcDirs += "src/test/java"
  }

  processResources {
    doFirst {
      from 'src/main/resources'
      filter(ReplaceTokens, tokens: [project_version: project.version, project_name: project.name])
    }
  }

  dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
      rules.all { ComponentSelection selection ->
        boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview", "b", "ea", "snapshot"].any {
          qualifier ->
            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
        }
        if (rejected) {
          selection.reject("Release candidate")
        }
      }
    }
  }

//  compileJava {
//    doFirst {
//      options.compilerArgs = [
//        '--module-path', classpath.asPath,
//      ]
//      classpath = files()
//    }
//  }

  configurations.all { config ->
    config.resolutionStrategy.dependencySubstitution {
      if (config.name.toLowerCase().contains('test')) {
        substitute module('org.slf4j:slf4j-simple:1.6.1') with module('org.slf4j:slf4j-nop:1.6.1')
      }
    }
  }

  tasks.withType(JavaCompile) {
    configure(options) {
      options.encoding = 'UTF-8'
      options.deprecation = true
      options.compilerArgs += ['--release', '8']
      options.compilerArgs += '-Xlint:deprecation'
      options.compilerArgs += '-Xlint:unchecked'
    }
  }
}

jar {
  manifest {
    attributes("Class-Path": configurations.compile.collect { it.getPath() }.join(' '))
  }
}

task stage(dependsOn: ['clean'])

task copyToLib(type: Copy) {
  from "$buildDir/libs"
  into "$rootProject.buildDir/libs"
}
copyToLib.dependsOn(stage)
stage.dependsOn(copyToLib)

task copyLicense {
  outputs.file new File("$buildDir/LICENSE")
  doLast {
    copy {
      from "LICENSE"
      into "$buildDir"
    }
  }
}
